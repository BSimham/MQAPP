	

	@KafkaListener(groupId = "${kafka.groupIdConfig}", topics = "${kafka.stringTopicName}", containerFactory = "stringListenerFactory")
	public void consume(ConsumerRecord<String, String> record, Acknowledgment acknowledgment,
			@org.springframework.messaging.handler.annotation.Headers MessageHeaders headers, Consumer<String,String> consumer) throws Exception {

		try {
			String message = record.value();
			LOGGER.info("Start of stringConsumer(...)");
			LOGGER.info("Record Headers->" + record.headers());
			record.headers().forEach(header->{
				String key = header.key();
				String value = new String((byte[]) header.value(),StandardCharsets.UTF_8);
				LOGGER.info("{} : {}",key,value);			
				
			});
//			LOGGER.info("Headers->" + headers);
//			headers.forEach((key,value)->{
//				 value = new String((byte[]) value,StandardCharsets.UTF_8);
//				 LOGGER.info("{} : {}",key,value);
//			});
			
			
			String headerValue = new String((byte[]) headers.get("ActingWorkgroup"),StandardCharsets.UTF_8);
			LOGGER.info("Received acting workgroup :{}",headerValue);
			LOGGER.info("Header offset {}", headers.get("kafka_offset"));
			LOGGER.info("Record offset {}",record.offset());
//			LOGGER.info("Consumer record ..{}",record);
			LOGGER.info("message  ..{}",message);
			kafkaListener.messageListener(message, acknowledgment);
			
			commitOffsetAsyncWithRetry(record,acknowledgment,3,1000l);
			LOGGER.info("End of stringConsumer(...)");
		} catch (Exception e) {
			e.printStackTrace();
			LOGGER.error("Error while consuming a string message {}", e);
			throw e;

		}
	}


private void commitOffsetAsyncWithRetry(ConsumerRecord<String, String> record, Acknowledgment acknowledgment,
			int maxRetries,long retryDelay) {
		
		
		retryExecutor.submit(()->{
			int retryCount = 0;
			while(retryCount<maxRetries) {
				try {
					acknowledgment.acknowledge();
					LOGGER.info("Offset commit succeeded on attempt {} for record {}",retryCount+1,record);
					return;
				}catch(Exception e) {
					retryCount++;
					if(retryCount>=maxRetries) {
						LOGGER.info("Failed to commit offset for record {}",record);
						return;
					}
					try {
						TimeUnit.MILLISECONDS.sleep(retryDelay);
					}catch(InterruptedException ie) {
						Thread.currentThread().interrupt();
					}
				}
			}
		});
	}

is this good way to handle Kafka commits? how is it different from built in Acknowledgment.acknowledge?



import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;


import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
are these packages available in all jdk 8 versions

2024-10-25T09:36:38,440 ERROR [ajp-nio-127.0.0.1-8011-exec-3] (itsta.ServicePortTypeImpl.sendITSRequest:285) Error while posting  the request @ https://delphimicrosvcs.verizon.com/TAMicroService/tams/itsRequest
java.net.ConnectException: Connection timed out (Connection timed out)
        at java.net.PlainSocketImpl.socketConnect(Native Method) ~[?:1.8.0_401]
        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476) ~[?:1.8.0_401]
        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218) ~[?:1.8.0_401]
        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200) ~[?:1.8.0_401]
        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394) ~[?:1.8.0_401]
        at java.net.Socket.connect(Socket.java:606) ~[?:1.8.0_401]
        at sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:303) ~[?:1.8.0_401]
        at sun.security.ssl.BaseSSLSocketImpl.connect(BaseSSLSocketImpl.java:173) ~[?:1.8.0_401]
        at sun.net.NetworkClient.doConnect(NetworkClient.java:180) ~[?:1.8.0_401]
        at sun.net.www.http.HttpClient.openServer(HttpClient.java:499) ~[?:1.8.0_401]
        at sun.net.www.http.HttpClient.openServer(HttpClient.java:594) ~[?:1.8.0_401]
        at sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:263) ~[?:1.8.0_401]
        at sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:366) ~[?:1.8.0_401]
        at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:207) ~[?:1.8.0_401]
        at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1167) ~[?:1.8.0_401]
        at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1061) ~[?:1.8.0_401]
        at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:193) ~[?:1.8.0_401]
        at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1354) ~[?:1.8.0_401]
        at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1329) ~[?:1.8.0_401]
        at sun.net.www.protocol.https.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java:264) ~[?:1.8.0_401]
        at com.verizon.pts.itsta.ServicePortTypeImpl.sendITSRequest(ServicePortTypeImpl.java:271) ~[classes/:?]
        at com.verizon.pts.itsta.ServicePortTypeImpl.ITSRequestTest(ServicePortTypeImpl.java:144) ~[classes/:?]
        at com.verizon.pts.itsta.ServicePortTypeImpl.processTicket(ServicePortTypeImpl.java:94) ~[classes/:?]
        at sun.reflect.GeneratedMethodAccessor117.invoke(Unknown Source) ~[?:?]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_401]
        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_401]
        at org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:180) ~[cxf-2.7.3.jar:2.7.3]


private ClientHttpRequestFactory clientHttpRequestFactory() {
		ConnectionConfig connectionConfig = ConnectionConfig.custom()
                .setConnectTimeout(Timeout.ofMilliseconds(propertyConfigBean.getTamsConnectionTimeoutInMs()))
                .build();

        // Socket timeout
        SocketConfig socketConfig = SocketConfig.custom()
                .setSoTimeout(Timeout.ofMilliseconds(propertyConfigBean.getTamsReadTimeoutInMs()))
                .build();

        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();
        connectionManager.setDefaultSocketConfig(socketConfig);
        connectionManager.setDefaultConnectionConfig(connectionConfig);

        HttpClient httpClient = HttpClientBuilder.create()
                .setConnectionManager(connectionManager)
                .build();

		HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory(httpClient);
		factory.setConnectTimeout(propertyConfigBean.getTamsConnectionTimeoutInMs());
		return factory;
	}
	
	
	
	private ClientHttpRequestFactory clientHttpRequestFactory() {
		HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory();
		factory.setReadTimeout(propertyConfigBean.getTamsReadTimeoutInMs());
		factory.setConnectTimeout(propertyConfigBean.getTamsConnectionTimeoutInMs());
		return factory;
	}


import org.apache.catalina.core.StandardThreadExecutor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;

import java.lang.management.ManagementFactory;
import java.lang.management.ThreadMXBean;

@Configuration
@EnableScheduling
public class MetricsLogger {

    private static final Logger logger = LoggerFactory.getLogger(MetricsLogger.class);

    @Autowired
    private StandardThreadExecutor tomcatExecutor; // Tomcat Thread Executor for pool metrics

    @Scheduled(fixedRate = 60000) // Log every 60 seconds
    public void logMetrics() {
        logThreadPoolMetrics();
        logMemoryUsage();
        logJvmThreadMetrics();
    }

    private void logThreadPoolMetrics() {
        int maxThreads = tomcatExecutor.getMaxThreads();
        int activeThreads = tomcatExecutor.getActiveCount();
        int poolSize = tomcatExecutor.getPoolSize();
        logger.info("Tomcat Thread Pool - Max Threads: {}, Active Threads: {}, Pool Size: {}", maxThreads, activeThreads, poolSize);
    }

    private void logMemoryUsage() {
        Runtime runtime = Runtime.getRuntime();
        long usedMemory = runtime.totalMemory() - runtime.freeMemory();
        long maxMemory = runtime.maxMemory();
        logger.info("JVM Memory Usage - Used: {} MB, Max: {} MB", usedMemory / (1024 * 1024), maxMemory / (1024 * 1024));
    }

    private void logJvmThreadMetrics() {
        ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();
        int liveThreads = threadBean.getThreadCount();
        int peakThreads = threadBean.getPeakThreadCount();
        logger.info("JVM Threads - Live: {}, Peak: {}", liveThreads, peakThreads);
    }
}

